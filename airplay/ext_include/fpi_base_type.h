/*
fpi_base_type.h
*/

#ifndef __FPI_BASE_TYPES__
#define __FPI_BASE_TYPES__

#include <stdio.h>
#include <stdlib.h>




#ifdef __cplusplus
extern "C" {
#endif

#ifdef HAVE_STDINT_H
#include <stdint.h>
#else
#ifndef __int8_t_defined
	#define __int8_t_defined
	typedef	signed char 				int8_t;
	typedef	signed short int 			int16_t;
	typedef	signed int 				int32_t;
#endif

typedef unsigned char			uint8_t;
typedef unsigned short int		uint16_t;
typedef signed long long               int64_t;
typedef unsigned long long               uint64_t;


#ifndef __uint32_t_defined
	typedef unsigned int		uint32_t;
	#define __uint32_t_defined
#endif

#ifndef __uint64_t_defined
        typedef unsigned long long uint64_t;
        #define __uint64_t_defined
#endif

#endif

#ifndef __wchar_defined
	#define __wchar_defined
	typedef uint16_t 			wchar;
#endif

#ifndef __byte_defined
	#define __byte_defined
	typedef uint8_t 			byte;
#endif

#ifndef __word_defined
	#define __word_defined
	typedef uint16_t 			word;
#endif

#ifndef __dword_defined
	#define __dword_defined
	typedef uint32_t 			dword;
#endif

/*
#undef NULL
#if defined(__cplusplus)
#define NULL 0
#else
#define NULL ((void *)0)
#endif
*/

#ifndef NULL
#define NULL (void*)0
#endif


#ifndef __cplusplus
	#ifdef bool
		#undef bool
	#endif
	#define bool byte 
	
	#ifdef true
		#undef true
	#endif
	#define true 1
	
	#ifdef false
		#undef false
	#endif
	#define false 0
#endif

/// the bit-wise bools
typedef struct
{
    uint8_t bBOOL_0    : 1;
    uint8_t bBOOL_1    : 1;
    uint8_t bBOOL_2    : 1;
    uint8_t bBOOL_3    : 1;
    uint8_t bBOOL_4    : 1;
    uint8_t bBOOL_5    : 1;
    uint8_t bBOOL_6    : 1;
    uint8_t bBOOL_7    : 1;
} fpi_bools;

/*
--------------------------------------------
*/


#define VIDEO_SCAN_COMPILE_TEMP_PATCH   0

typedef int8_t				    fpi_bool;

#define fpi_true			    1
#define fpi_false			    0


typedef uint32_t			    fpi_linein_t;


#define FPI_LINEIN_INVALID		0x00000000

#define FPI_LINEIN_CATV		    0x00000001
#define FPI_LINEIN_TATV		    0x00000002
#define FPI_LINEIN_ATV_ALL	(FPI_LINEIN_CATV+FPI_LINEIN_TATV)
#define FPI_LINEIN_CDTV		    0x00000004
#define FPI_LINEIN_TDTV		    0x00000008
#define FPI_LINEIN_DTV_ALL	(FPI_LINEIN_CDTV+FPI_LINEIN_TDTV)
#define FPI_LINEIN_TV_ALL	(FPI_LINEIN_ATV_ALL+FPI_LINEIN_DTV_ALL)

#define FPI_LINEIN_CVBS1		0x00000010
#define FPI_LINEIN_CVBS2		0x00000020
#define FPI_LINEIN_CVBS3		0x00000040
#define FPI_LINEIN_CVBS4		0x00000080
#define FPI_LINEIN_CVBS_ALL		(FPI_LINEIN_CVBS1+FPI_LINEIN_CVBS2+FPI_LINEIN_CVBS3+FPI_LINEIN_CVBS4)

#define FPI_LINEIN_SVIDEO1		0x00000100
#define FPI_LINEIN_SVIDEO2		0x00000200
#define FPI_LINEIN_SVIDEO_ALL	(FPI_LINEIN_SVIDEO1+FPI_LINEIN_SVIDEO2)

#define FPI_LINEIN_COMPONENT1	0x00001000
#define FPI_LINEIN_COMPONENT2	0x00002000
#define FPI_LINEIN_COMPONENT3	0x00004000
#define FPI_LINEIN_COMPONENT4	0x00008000
#define FPI_LINEIN_COMPONENT_ALL	(FPI_LINEIN_COMPONENT1+FPI_LINEIN_COMPONENT2+FPI_LINEIN_COMPONENT3+FPI_LINEIN_COMPONENT4)

#define FPI_LINEIN_PC1			0x00010000
#define FPI_LINEIN_PC2			0x00020000
#define FPI_LINEIN_PC_ALL		(FPI_LINEIN_PC1+FPI_LINEIN_PC2)

#define FPI_LINEIN_HDMI1		0x00100000
#define FPI_LINEIN_HDMI2		0x00200000
#define FPI_LINEIN_HDMI3		0x00400000
#define FPI_LINEIN_HDMI4		0x00800000
#define FPI_LINEIN_HDMI_ALL	(FPI_LINEIN_HDMI1+FPI_LINEIN_HDMI2+FPI_LINEIN_HDMI3+FPI_LINEIN_HDMI4)

#define FPI_LINEIN_SCART1		0x01000000
#define FPI_LINEIN_SCART2		0x02000000
#define FPI_LINEIN_SCART_ALL	(FPI_LINEIN_SCART1+FPI_LINEIN_SCART2)

#define FPI_LINEIN_STORAGE    	0x04000000

#define FPI_LINEIN_KTV    		0x08000000    /*ct 2014.1.16 add ktv source*/

#define FPI_LINEIN_NONE			0x80000000
#define FPI_LINEIN_ALL			(FPI_LINEIN_TV_ALL+FPI_LINEIN_CVBS_ALL+FPI_LINEIN_COMPONENT_ALL\
	+FPI_LINEIN_PC_ALL+FPI_LINEIN_HDMI_ALL+FPI_LINEIN_SCART_ALL+FPI_LINEIN_STORAGE+FPI_LINEIN_KTV)





#if 0
typedef enum EN_MODEL_ID
{
    LOG_MODEL_ALL,   //一定要在第一行
    LOG_MODEL_AUDIO,
    LOG_MODEL_BOOKING,
    LOG_MODEL_CEC,
    LOG_MODEL_CHANNEL_SCAN,
    LOG_MODEL_CHANNEL,
    LOG_MODEL_CI_PLUS,
    LOG_MODEL_COMMON,
    LOG_MODEL_COFIG,
    LOG_MODEL_DATA_BASE ,
    LOG_MODEL_DATA_MANAGE ,
    LOG_MODEL_DLNA ,
    LOG_MODEL_EPG ,
    LOG_MODEL_FACTORY ,
    LOG_MODEL_GRAPHICS ,
    LOG_MODEL_HBBTV ,
    LOG_MODEL_LINEIN ,
    LOG_MODEL_MHL,
    LOG_MODEL_MEDIA ,
    LOG_MODEL_MEM ,
    LOG_MODEL_MHEG5 ,
    LOG_MODEL_OAD ,
    LOG_MODEL_PLAY ,
    LOG_MODEL_PSI ,
    LOG_MODEL_POWER ,
    LOG_MODEL_SCART ,
    LOG_MODEL_SIGNAL ,
    LOG_MODEL_SPIFLASH ,
    LOG_MODEL_STATE ,
    LOG_MODEL_SUBTITLE ,
    LOG_MODEL_TELETEXT ,
    LOG_MODEL_TIME ,
    LOG_MODEL_USER_TIME ,
    LOG_MODEL_VIDEO ,
    LOG_MODEL_ZOOM ,
    LOG_MODEL_SYSTEM,
    LOG_MODEL_PVR,
    
    LOG_MODEL_IWEDIA_COMMON,
    LOG_MODEL_API_COMMON,
    
    LOG_MODEL_REQUEST,
    LOG_MODEL_REQUEST_SOCKET,
    LOG_MODEL_SERVICE,
    LOG_MODEL_DEBUG,
    LOG_MODEL_MSG,
    LOG_MODEL_NETWORK,

    LOG_MODEL_API_LIB, //add by lwf 2013.12.03
    LOG_MODEL_DB_SERVICE ,//add by sunjp 2013.12.05
    LOG_MODEL_EXPAND,

    LOG_MODEL_3D,
    LOG_MODEL_BGM,
    LOG_MODEL_NETWORK_UPDATE,
    LOG_MODEL_USB_UPDATE,
    LOG_MODEL_USB_MONITOR,
    LOG_MODEL_PROPERTY,//add by wangzliang

    LOG_MODEL_BLUETOOTH,
    LOG_MODEL_KTV,
    LOG_MODEL_SAFETY,
	LOG_MODEL_SETTING,

    LOG_MODEL_OTHER,
    LOG_MODEL_NUM,
}EN_MODEL_ID_T;
#endif

typedef uint32_t EN_MODEL_ID_T;


//下面MODULE的ID只能添加，不能修改
#define SITA_MODULE_ALL                     0x00

#define SITA_MODULE_COMMON                  0x01
#define SITA_MODULE_3D                      0x02
#define SITA_MODULE_AUDIO                   0x03
#define SITA_MODULE_BGM                     0x04
#define SITA_MODULE_BOOKING                 0x05
#define SITA_MODULE_BLUETOOTH               0x06
#define SITA_MODULE_CEC                     0x07
#define SITA_MODULE_CHANNEL_SCAN            0x08
#define SITA_MODULE_CHANNEL                 0x09
#define SITA_MODULE_CI                      0x0a
#define SITA_MODULE_CI_PLUS                 0x0b  //使用上面CI的，这里保留，因为和FPI_ERROR_CODE统一
#define SITA_MODULE_CONFIG                  0x0c
#define SITA_MODULE_DATA_BASE               0x0d
#define SITA_MODULE_DATA_MANAGE             0x0e
#define SITA_MODULE_DLNA                    0x0f
#define SITA_MODULE_EPG                     0x10
#define SITA_MODULE_FACTORY                 0x11
#define SITA_MODULE_GRAPHICS                0x12
#define SITA_MODULE_HBBTV                   0x13
#define SITA_MODULE_LINEIN                  0x14
#define SITA_MODULE_KTV                     0x15
#define SITA_MODULE_MHL                     0x16
#define SITA_MODULE_MEDIA                   0x17
#define SITA_MODULE_MEM                     0x18
#define SITA_MODULE_MHEG5                   0x19
#define SITA_MODULE_MSG                     0x1a
#define SITA_MODULE_NETWORK                 0x1b
#define SITA_MODULE_NETWORK_UPDATE          0x1c
#define SITA_MODULE_OAD                     0x1d
#define SITA_MODULE_PLAY                    0x1e
#define SITA_MODULE_PROPERTY                0x1f
#define SITA_MODULE_PROXY                   0x20
#define SITA_MODULE_PSI                     0x21
#define SITA_MODULE_POWER                   0x22
#define SITA_MODULE_PVR                     0x23
#define SITA_MODULE_SAFETY                  0x24
#define SITA_MODULE_SCART                   0x25
#define SITA_MODULE_SETTING                 0x26
#define SITA_MODULE_SERVICE                 0x27
#define SITA_MODULE_SIGNAL                  0x28
#define SITA_MODULE_SPIFLASH                0x29
#define SITA_MODULE_STATE                   0x2a
#define SITA_MODULE_SUBTITLE                0x2b
#define SITA_MODULE_SYSTEM	                0x2c
#define SITA_MODULE_TELETEXT                0x2d
#define SITA_MODULE_TIME                    0x2e
#define SITA_MODULE_USER_TIME               0x2f          
#define SITA_MODULE_USB_MONITOR             0x30
#define SITA_MODULE_USB_UPDATE              0x31
#define SITA_MODULE_VIDEO                   0x32
#define SITA_MODULE_ZOOM                    0x33
#define SITA_MODULE_EVENT                   0x34
#define SITA_MODULE_CC                      0x35
#define SITA_MODULE_SNAPSHOT_RECORD         0x36
#define SITA_MODULE_FPP        				 0x37
#define SITA_MODULE_PANEL					0x38//Amy
#define SITA_MODULE_SESSION                0x39
#define SITA_MODULE_TOOLSETS				0x040
#define SITA_MODULE_TIF					0x41
#define SITA_MODULE_ITV					0x42
#define SITA_MODULE_KDM                 0x43  
#define SITA_MODULE_MEDIA_SHARE         0x44
#define SITA_MODULE_CRB_APP_MNGR        0x45
#define SITA_MODULE_MDS                 0x46
#define SITA_MODULE_TTS                 0x47
#define SITA_MODULE_ATSC                0x48
#define SITA_MODULE_ARIB                0x49
#define SITA_MODULE_BCAS                0x4A
#define SITA_MODULE_THAL                0x4B
#define SITA_MODULE_PROJECTOR           0x4C
//比较特别的模块
#define SITA_MODULE_BASE_IO                 0xf0
#define SITA_MODULE_BASE_IIC                0xf1
#define SITA_MODULE_EXPAND                  0xf2
#define SITA_MODULE_DEBUG                   0xf3
#define SITA_MODULE_IWEDIA_COMMON           0xf4
#define SITA_MODULE_API_LIB                 0xf5

#define SITA_MODULE_SOC						0xfe


#define SET_MODEL_ID(x) static const EN_MODEL_ID_T g_model_id=x
#define CURRENT_MODEL_ID (g_model_id)


#define FPP_ERR_MODULE_3D                            (0x01)
#define FPP_ERR_MODULE_AMP                          (0x02)
#define FPP_ERR_MODULE_AUDIO                      (0x03)
#define FPP_ERR_MODULE_BOARD                      (0x04)
#define FPP_ERR_MODULE_CAM                          (0x05)
#define FPP_ERR_MODULE_CC                            (0x06)
#define FPP_ERR_MODULE_CEC                          (0x07)
#define FPP_ERR_MODULE_CHANNEL                   (0x08)
#define FPP_ERR_MODULE_COMMON                   (0x09)
#define FPP_ERR_MODULE_DECODER                  (0x0A)
#define FPP_ERR_MODULE_DEMOD                      (0x0B)
#define FPP_ERR_MODULE_DEMUX                      (0x0C)
#define FPP_ERR_MODULE_FACTORY                   (0x0D)
#define FPP_ERR_MODULE_GPIO                         (0x0E)
#define FPP_ERR_MODULE_INTERGRATION           (0x0F)
#define FPP_ERR_MODULE_LINEIN                      (0x10)
#define FPP_ERR_MODULE_MHL                          (0x11)
#define FPP_ERR_MODULE_MULTIPLAYER             (0x12)
#define FPP_ERR_MODULE_MULTITSI                   (0x13)
#define FPP_ERR_MODULE_PANEL                       (0x14)
#define FPP_ERR_MODULE_PICTURE                    (0x15)
#define FPP_ERR_MODULE_POWER                      (0x16)
#define FPP_ERR_MODULE_SCART                       (0x17)
#define FPP_ERR_MODULE_SHELL                        (0x18)
#define FPP_ERR_MODULE_SIGNAL                      (0x19)
#define FPP_ERR_MODULE_SMC                           (0x1A)
#define FPP_ERR_MODULE_SYSTEM                      (0x1B)
#define FPP_ERR_MODULE_TSI                            (0x1C)
#define FPP_ERR_MODULE_VBI                            (0x1D)
#define FPP_ERR_MODULE_VIDEO                        (0x1E)
#define FPP_ERR_MODULE_ZOOM                         (0x1F)
#define FPP_ERR_MODULE_DLL                             (0x20)

#define FPI_SIGNAL_FORMAT_INVALID			0

#define FPI_SIGNAL_480I					    1
#define FPI_SIGNAL_480P					    2
#define FPI_SIGNAL_576I     				3
#define FPI_SIGNAL_576P     				4

#define FPI_SIGNAL_720P50					11
#define FPI_SIGNAL_720P60					12
#define FPI_SIGNAL_1080I50					13
#define FPI_SIGNAL_1080I60					14
#define FPI_SIGNAL_1080P50					15
#define FPI_SIGNAL_1080P60					16

#define FPI_SIGNAL_1080P23					17
#define FPI_SIGNAL_1080P24					18
#define FPI_SIGNAL_1080P25					19
#define FPI_SIGNAL_1080P29					20
#define FPI_SIGNAL_1080P30					21

#define FPI_SIGNAL_VGA_640X480_60			51
#define FPI_SIGNAL_VGA_640X480_72			52
#define FPI_SIGNAL_VGA_640X480_75			53
#define FPI_SIGNAL_VGA_640X480_85			54

#define FPI_SIGNAL_VGA_720X400_70			55

#define FPI_SIGNAL_SVGA_800X600_56			61
#define FPI_SIGNAL_SVGA_800X600_60			62
#define FPI_SIGNAL_SVGA_800X600_72			63
#define FPI_SIGNAL_SVGA_800X600_75			64
#define FPI_SIGNAL_SVGA_800X600_85			65

#define FPI_SIGNAL_XGA_1024X768_60			71
#define FPI_SIGNAL_XGA_1024X768_70			72
#define FPI_SIGNAL_XGA_1024X768_75			73
#define FPI_SIGNAL_XGA_1024X768_85			74

#define FPI_SIGNAL_WXGA_1366X768_60		    81
#define FPI_SIGNAL_WXGA_1366X768_75		    82
#define FPI_SIGNAL_WXGA_1360X768_60		    83
#define FPI_SIGNAL_WXGA_1280X768_60_474	    84
#define FPI_SIGNAL_WXGA_1280X768_60_478	    85
#define FPI_SIGNAL_WXGA_1280X960_60		    86
#define FPI_SIGNAL_WXGA_1280X960_85		    87
#define FPI_SIGNAL_WXGA_1280X800_60		    88

#define FPI_SIGNAL_SXGA_1280X1024_60		91
#define FPI_SIGNAL_SXGA_1280X1024_75		92
#define FPI_SIGNAL_SXGA_1440X1050_60		93

#define FPI_SIGNAL_UXGA_1600X1200_60		101
#define FPI_SIGNAL_WUXGA_1920X1200_60		102
#define FPI_SIGNAL_WUXGA_2048X1536_60		103
#define FPI_SIGNAL_WUXGA_1920X1080_60       104

#define FPI_SIGNAL_HDTV_1920X1080_60_666	121
#define FPI_SIGNAL_HDTV_1920X1080_60_675	122

#define FPI_SIGNAL_UNKNOW					255
#define FPI_SIGNAL_ALL						255

#define FPI_ZOOM_AUTO						0x0000
#define FPI_ZOOM_4X3						0x0001
#define FPI_ZOOM_16X9						0x0002
#define FPI_ZOOM_14X9						0x0004
#define FPI_ZOOM_PANORAMA					0x0008
#define FPI_ZOOM_FILM						0x0010
#define FPI_ZOOM_SUBTITLE					0x0020
#define FPI_ZOOM_DOT_BY_DOT				    0x0040
#define FPI_ZOOM_FULLSCREEN				    0x0080
#define FPI_ZOOM_PREVIEW			       	0x0100
#define FPI_ZOOM_USERDEFINE1				0x0200
#define FPI_ZOOM_USERDEFINE2				0x0400
#define FPI_ZOOM_USERDEFINE3				0x0800
#define FPI_ZOOM_USERDEFINE4				0x1000
#define FPI_ZOOM_USERDEFINE5				0x2000
#define FPI_ZOOM_USERDEFINE6				0x4000
#define FPI_ZOOM_USERDEFINE7				0x8000


#define FPI_SIGNAL_STATUS_UNKNOW			0x00
#define FPI_SIGNAL_STATUS_LOCK				0x01
#define FPI_SIGNAL_STATUS_UNLOCK			0x02
#define FPI_SIGNAL_STATUS_FORMAT_CHANGED    0x04
#define FPI_SIGNAL_STATUS_UNSTABLE			0x08

#define FPI_TUNE_MODE_INVALID				0xffff

#define FPI_TUNE_MODE_CABLE_SEARCH_D		0x0000
#define FPI_TUNE_MODE_CABLE_SEARCH_A		0x0001
#define FPI_TUNE_MODE_CABLE_CHANGE_D		0x0010
#define FPI_TUNE_MODE_CABLE_CHANGE_A		0x0011
#define FPI_TUNE_MODE_AIR_SEARCH_D			0x0100
#define FPI_TUNE_MODE_AIR_SEARCH_A			0x0101
#define FPI_TUNE_MODE_AIR_CHANGE_D			0x0110
#define FPI_TUNE_MODE_AIR_CHANGE_A			0x0111
#define FPI_TUNE_MODE_ISDB_SEARCH_T         0x1000
#define FPI_TUNE_MODE_ISDB_CHANGE_T         0x1001
#define FPI_TUNE_MODE_ISDB_SEARCH_S         0x2000
#define FPI_TUNE_MODE_ISDB_CHANGE_S         0x2001

#define FPI_TUNE_MODE_MASK_IS_A			    0x0001
#define FPI_TUNE_MODE_MASK_IS_CHANGE		0x0010
#define FPI_TUNE_MODE_MASK_IS_AIR			0x0100

#define FPI_SEARCH_DMOD_INVALID			    0x00
#define FPI_SEARCH_DMOD_QAM4				0x01
#define FPI_SEARCH_DMOD_VSB8				0x02
#define FPI_SEARCH_DMOD_QAM16				0x04
#define FPI_SEARCH_DMOD_QAM32				0x08
#define FPI_SEARCH_DMOD_QAM64				0x10
#define FPI_SEARCH_DMOD_QAM128				0x20
#define FPI_SEARCH_DMOD_QAM256				0x40

#define FPI_MSTAR_CI    0// 1

#define FINE_TUNE_RANGE         50

//#define FPI_DUAL_TUNER		1

#define FPI_IS_LA_COUNTRY(c)            \
                (((MEMBER_COUNTRY)c == E_ARGENTINA) || ((MEMBER_COUNTRY)c == E_BELIZE) \
                || ((MEMBER_COUNTRY)c == E_BOLIVIA) || ((MEMBER_COUNTRY)c == E_BRAZIL) \
                || ((MEMBER_COUNTRY)c == E_CHILE) || ((MEMBER_COUNTRY)c == E_COSTARICA) \
                || ((MEMBER_COUNTRY)c == E_ECUADOR) || ((MEMBER_COUNTRY)c == E_SALVADO) \
                || ((MEMBER_COUNTRY)c == E_GUATEMALA) || ((MEMBER_COUNTRY)c == E_NICARAGUA) \
                || ((MEMBER_COUNTRY)c == E_PARAGUAY) || ((MEMBER_COUNTRY)c == E_PERU) \
                || ((MEMBER_COUNTRY)c == E_URUGUAY) || ((MEMBER_COUNTRY)c == E_VENEZUELA))

/**
@brief 国家枚举,不可中间插入，只能使用新的值
**/
typedef enum
{
    E_AUSTRALIA=0,                    ///< Australia
    E_AUSTRIA=1,                      ///< Austria
    E_BELGIUM=2,                      ///< Belgium
    E_BULGARIA=3,                     ///< Bulgaria
    E_CROATIA=4,                      ///< Croatia
    E_CZECH=5,                        ///< Czech
    E_DENMARK=6,                      ///< Denmark
    E_FINLAND=7,                      ///< Finland
    E_FRANCE=8,                       ///< France
    E_GERMANY=9,                      ///< Germany
    E_GREECE=10,                       ///< Greece
    E_HUNGARY=11,                      ///< Hungary
    E_ITALY=12,                        ///< Italy
    E_LUXEMBOURG=13,                   ///< Luxembourg
    E_NETHERLANDS=14,                  ///< Netherland
    E_NORWAY=15,                       ///< Norway
    E_POLAND=16,                       ///< Poland
    E_PORTUGAL=17,                     ///< Portugal
    E_RUMANIA=18,                      ///< Rumania
    E_RUSSIA=19,                       ///< Russia
    E_SERBIA=20,                       ///< Serbia
    E_SLOVENIA=21,                     ///< Slovenia
    E_SPAIN=22,                        ///< Spain
    E_SWEDEN=23,                       ///< Sweden
    E_SWITZERLAND=24,                  ///< Switzerland
    E_UK=25,                           ///< UK
    E_NEWZEALAND=26,                   ///< New Zealand
    E_ARAB=27,                         ///< Arab
    E_ESTONIA=28,                      ///< Estonia
    E_HEBREW=29,                       ///< Hebrew
    E_LATVIA=30,                       ///< Latvia
    E_SLOVAKIA=31,                     ///< Slovakia
    E_TURKEY=32,                       ///< Turkey
    E_IRELAND=33,                      ///< Ireland
    E_JAPAN=34,                         ///<Japan
    E_PHILIPPINES=35,             ///<Philippines
    E_THAILAND=36,                ///<Thailand
    E_MALDIVES=37,                 ///<Maldives
    E_URUGUAY=38,                  ///<Uruguay
    E_PERU=39,                            ///<Peru
    E_ARGENTINA=40,                 ///<Argentina
    E_CHILE=41,                           ///<Chile
    E_VENEZUELA=42,                ///Venezuela
    E_ECUADOR=43,                     ///<Ecuador
    E_COSTARICA=44,                 ///<Costarica
    E_PARAGUAY=45,                    ///<Paraguay
    E_BOLIVIA=46,                      ///<Bolivia
    E_BELIZE=47,                          ///<Belize
    E_NICARAGUA=48,                  ///<Nicaragua
    E_GUATEMALA=49,                 ///<Guatemala
    E_CHINA=50,                        ///< China
    E_TAIWAN=51,                       ///< Taiwan
    E_BRAZIL=52,                       ///< Brazil
    /* ATSC Country Start */
    E_CANADA=53,                       ///< Canada
    E_MEXICO=54,                       ///< Mexico
    E_US=55,                           ///< United States
    E_SOUTHKOREA=56,                    ///< South Korea
    E_ROMANIA=57,                      ///<romania added by fuyong 2013/11/19
    /* ATSC Country End */
	/* EM country add by yanmh 2014/12/23 */
	E_VIETNAM=58,
	E_UKRAINE=59,
	E_IRAN=60,
	E_IRAQ=61,
	E_BURMA=62,
	E_KAZAKSTAN=63,
	E_UZBEKISTAN=64,
	E_TAJIKSTAN=65,
	E_KYRGYZSTAN=66,
	E_ALGERIA=67,
	E_EGYPT=68,
	E_TUNISIA=69,
	E_TANZANIA=70,
	E_KENYA=71,
	E_PAKISTAN=72,
	E_INDONESIA=73,
	E_KUWAIT=74,
	E_SAUDI_ARABIA=75,
	E_QATAR=76,
	E_ISRAEL=77,
	E_LEBANON=78,
	E_BAHRAIN=79,
	E_ANGOLA=80,
	E_CONGO=81,

	/* EM country add by yanmh 2015/3/27 */
	E_INDIA=82,
	E_TURKMENISTAN=83,
	E_COLOMBIA=84,
	E_MONGOLIA=85,
	E_BANGLADESH=86,
	E_NEPAL=87,
	E_SRI_LANKA=88,
	E_NORTH_KOREA=89,						//Democratic People's Republic of Korea
	E_MOLDOVA=90,
	E_POLYNESIA=91,						//French Polynesia
	E_SALVADO=92,                      //萨尔瓦多 
    /*HONG KONG area add by wangzliang 2015/07/13*/
    E_HONGKONG=93,
    E_FIJI=94,                          //fiji added by wangzliang 2015/08/06 
    E_LIBERIA=95,
    E_JORDAN=96,
    E_MYANMAR=97,
    E_GHANA=98,
    E_GEORGIA=99,
    E_ARMENIA=100,
    E_OMAN=101,
    E_YEMEN=102,
    E_SYRIA=103,
    E_PALESTINE=104,
    E_AFGHANISTAN=105,
    E_MOROCCO=106,
    E_BENIN=107,
    E_IVORY_COAST=108,
    E_NIGERIA=109,
    E_SUDAN=110,
    E_ETHIOPIA=111, 
    E_ZAMBIA=112,
    E_DEMOCRATIC_CONGO=113,
    E_SOUTHAFRICA=114,
    E_MOZAMBIQUE=115,
    E_LIBYA=116,
    E_ALBANIA=117,
    E_BELARUS=118,
    E_ICELAND=119,
	E_LITHUANIA=120,
	E_MAURITIUS=121,///< Mauritius
	E_DUBAI=122,///< Dubai
	E_UAE=123,///< Uae
	E_TAJIKISTAN=124,///< Tajikistan
	E_BENGAL=125,///< Bengal	
	E_BOSNIA_HERCEGOVINA=126,///< Bosnia Hercegovina	
	E_CYPRUS=127,///< Cyprus	
	E_KOSOVO=128,///< Kosovo	
	E_MACEDONIA=129,///< Macedonia	
	E_MALTA=130,///< Malta	
	E_MONTENEGRO=131,///< Montenegro	
	E_CAMEROON =132,///< Cameroon 	
	E_SINGAPORE=133,///< Singapore
	E_MALAYSIA=134,///< Malaysia
	E_NEW_CALEDONIA=135,
	
	E_SURINAME=136,
	E_JAMAICA=137,
	E_CURACAO=138,
	E_ARUBA=139,
	E_ANTIGUA=140,			
	E_ST_LUCIA=141,
	E_BARBADOS=142,
	E_ST_VINCENT=143,
	E_ST_KITTS=144,
	E_GRENADA=145,
	E_TRINIDAD=146,
	E_GUYANA=147,
	E_PUERTO=148,
	E_PANAMA=149,
	E_DOMINICA=150,
	E_CUBA=151,
	E_HONDURAS=152,
	E_HAITI=153,	
	E_CAMBODIA=154,
	E_ZIMBABWE=155,  
	E_DOMINICAN=156,  
	E_BONAIRE=157,
	E_SOMALIA=158,
	E_AZERBAIJAN=159,
	E_UGANDA=160,
	E_RWANDA=161,
	E_GUINEA=162,
	E_BURUNDI=163,
	E_ABKHAZ=164,
	E_ANDORRA=165,
	E_ANGUILLA=166,
	E_ANTARCTICA=167,
	E_AMERICAN_SAMOA=168,
	E_AALAND_ISLANDS=169,
	E_BURKINA_FASO=170,
	E_BERMUDA=171,
	E_BRUNEI_DARUSSALAM=172, 	
	E_CARIBBEAN_NETHERLANDS=173, 	
	E_SAINT_BARTHELEMY=174,	
	E_BAHAMAS=175,	
	E_BHUTAN =176,	
	E_BOUVET_ISLAND= 177,	
	E_BOTSWANA= 178,	
	E_COCOS_ISLANDS= 179,
	E_CENTRAL_AFRICAN = 180,
	E_CAPE_VERDE=181,
	E_DJIBOUTI=182,
	E_ERITREA=183,
	E_WESTERN_SAHARA=184,
	E_MALVINAS=185,
	E_MICRONESIA=186,
	E_FAROE_ISLANDS=187,
	E_GABON=188,
	E_COOK_ISLANDS =189,
	E_GIBRALTAR=190,
	E_GREENLAND=191,
	E_FRENCH_GUIANA=192,
	E_GUADELOUPE=193,
	E_EQUATORIAL_GUINEA=194,
	E_GUAM=195,
	E_GUINEA_BISSAU=196,
	E_HEARD_AND_MC_DONALD_ISLANDS=197,
	E_ISLE_OF_MAN=198,
	E_BRITISH_INDIAN_OCEAN=199,
	E_JESEY=200,
	E_KIRIBATI=201,
	E_COMOROS=202,
	E_CAYMAN_ISLANDS=203,  
	E_LIECHTENSTEIN=204,
	E_LESOTHO  =205,        
	E_MONACO  =206,            
	E_SAINT_MARTIN=207,
	E_MADAGASCAR=208,
	E_MALI =209,
	E_MACAU		 =210,
	E_MARTINIQUE =211,
	E_MAURITANIA=212,
	E_MONTSERRAT=213,
	E_MALAWI=214,
	E_NAMIBIA  =215   ,
	E_NIGER    =216   ,       
	E_NORFOLK_ISLAND    =217   ,       
	E_NAURU          =218   ,           
	E_PAPUA_NEW_GUINEA =219   ,        
	E_PITCAIRN   =220,
	E_PALAU=221,
	E_REUNION=222,
	E_SOLOMON_ISLANDS=223,
	E_SEYCHELLES=224,
	E_SVALBARD_AND_JAN_MAYEN_ISLANDS=225,
	E_SIERRA_LEONE=226,
	E_SAN_MARINO=227,
	E_SENEGAL=228,
	E_SOUTH_SUDAN=229,
	E_SAO_TOME_PRINCIPE=230,
	E_SWAZILAND=231,
	E_TURKS_AND_CAICOS_ISLANDS=232,
	E_TOGO=233,
	E_CHAD=234,
	E_TOKELAU=235,
	E_EAST_TIMOR=236,
	E_TONGA=237,
	E_TUVALU=238,
	E_VATICAN_CITY_STATE =239,
	E_VIRGIN_ISLANDS_BRITISH=240,
	E_VIRGIN_ISLANDS_US=241,
	E_WALLIS_AND_FUTUNA_ISLANDS=242,
	E_SAMOA=243,
	E_MAYOTTE=244,
	E_CONGO_DEMOCRATIC=245,
	E_GUERNSEY=246,
	E_GAMBIA  =247,
	E_NORTHERN_MARIANA_ISLANDS=248,
	E_FRENCH_OUTHERN_TERRITORIES=249,
	E_NIUE=250,
	E_UNITED_STATES_MINOR_OUTLYING_IDLANDS=251,
	E_OTHERS,                       ///< Others
    // ------------------------------------
    E_COUNTRY_NUM,
} MEMBER_COUNTRY;


/**
@brief 语言枚举,不可中间插入，只能使用新的值
**/
typedef enum//ISO 639: 3-letter codes
{
    E_LANGUAGE_CZECH=0,
    E_LANGUAGE_CHAMIC=1,
    E_LANGUAGE_DANISH=2,
    E_LANGUAGE_DARGWA=3,
    E_LANGUAGE_LANDDAYAK=4,
    E_LANGUAGE_GERMAN=5,
    E_LANGUAGE_ENGLISH=6,
    E_LANGUAGE_SPANISH=7,
    E_LANGUAGE_GREEK=8,
    E_LANGUAGE_FRENCH=9,
    E_LANGUAGE_CROATIAN=10,
    E_LANGUAGE_SORBIANUPPER=11,
    E_LANGUAGE_ITALIAN=12,
    E_LANGUAGE_HUNGARIAN=13,
    E_LANGUAGE_DUTCH=14,
    E_LANGUAGE_NORWEGIAN=15,
    E_LANGUAGE_POLISH=16,
    E_LANGUAGE_PORTUGUESE=17,
    E_LANGUAGE_RUSSIAN=18,
    E_LANGUAGE_ROMANIAN=19,
    E_LANGUAGE_SLOVENIAN=20,
    E_LANGUAGE_SERBIAN=21,
    E_LANGUAGE_FINNISH=22,
    E_LANGUAGE_SWEDISH=23,
    E_LANGUAGE_BULGARIAN=24,
    E_LANGUAGE_SLOVAK=25,
    E_LANGUAGE_CHINESE=26, //chi
    E_LANGUAGE_CHUUKESE=27,
    E_LANGUAGE_GAELIC=28,
    E_LANGUAGE_GBAYA=29,
    E_LANGUAGE_WELSH=30,
    E_LANGUAGE_ARABIC=31,
    E_LANGUAGE_IRISH=32,
    E_LANGUAGE_LATVIAN=33,
    E_LANGUAGE_HEBREW=34,
    E_LANGUAGE_TURKISH=35,
    E_LANGUAGE_ESTONIAN=36,
    E_LANGUAGE_NETHERLANDS=37,//no in ISO639
    E_LANGUAGE_KOREAN=38,
    E_LANGUAGE_KOSRAEAN=39,
    E_LANGUAGE_HINDI=40,
    E_LANGUAGE_HITTITE=41,
    E_LANGUAGE_HMONG=42,
    E_LANGUAGE_MANDARIN=43,//no in ISO639
    E_LANGUAGE_CANTONESE=44,//no in ISO639
    E_LANGUAGE_MAORI=45,
    E_LANGUAGE_QAA=46,//no in ISO639
    E_LANGUAGE_UNDETERMINED=47,//**-- Italy CI Certificate --**//
    E_LANGUAGE_AD=48,//**-- AD language --**//
    E_LANGUAGE_UNKNOWN=49,       //move to hear to avoid haveing same value as spanish.
    E_LANGUAGE_NONE=50,          //move to hear to avoid haveing same value as spanish.
    E_LANGUAGE_ABKHAZIAN=51,
    E_LANGUAGE_ACHINESE=52,
    E_LANGUAGE_ACOLI=53,
    E_LANGUAGE_ADANGME=54,
    E_LANGUAGE_ADYGHE=55,
    E_LANGUAGE_AFAR=56,
    E_LANGUAGE_AFRIHILI=57,
    E_LANGUAGE_AFRIKAANS=58,
    E_LANGUAGE_AFRO=59,
    E_LANGUAGE_AINU=60,
    E_LANGUAGE_AKAN=61,
    E_LANGUAGE_AKKADIAN=62,
    E_LANGUAGE_ALBANIAN=63,
    E_LANGUAGE_ALEUT=64,
    E_LANGUAGE_ALGONQUIAN=65,
    E_LANGUAGE_ALTAISOUTHERN=66,
    E_LANGUAGE_ALTAIC=67,
    E_LANGUAGE_AMHARIC=68,
    E_LANGUAGE_APACHE=69,
    E_LANGUAGE_ARAMAIC=70,
    E_LANGUAGE_ARAGONESE=71,
    E_LANGUAGE_ARAPAHO=72,
    E_LANGUAGE_ARAUCANIAN=73,
    E_LANGUAGE_ARAWAK=74,
    E_LANGUAGE_ARMENIAN=75,
    E_LANGUAGE_ARTIFICIAL=76,
    E_LANGUAGE_ASSAMESE=77,
    E_LANGUAGE_ASTURIAN=78,
    E_LANGUAGE_ATHAPASCAN=79,
    E_LANGUAGE_AUSTRONESIAN=80,
    E_LANGUAGE_AUSTRALIAN=81,
    E_LANGUAGE_AVARIC=82,
    E_LANGUAGE_AVESTAN=83,
    E_LANGUAGE_AWADHI=84,
    E_LANGUAGE_AYMARA=85,
    E_LANGUAGE_AZERBAIJANI=86,
    E_LANGUAGE_AZTEC=87,
    E_LANGUAGE_BALINESE=88,
    E_LANGUAGE_BALTIC=89,
    E_LANGUAGE_BALUCHI=90,
    E_LANGUAGE_BAMBARA=91,
    E_LANGUAGE_BAMILEKE=92,
    E_LANGUAGE_BANDA=93,
    E_LANGUAGE_BANTU=94,
    E_LANGUAGE_BASA=95,
    E_LANGUAGE_BASHKIR=96,
    E_LANGUAGE_BASQUE=97,
    E_LANGUAGE_BEJA=98,
    E_LANGUAGE_BEMBA=99,
    E_LANGUAGE_BENGALI=100,
    E_LANGUAGE_BERBER=101,
    E_LANGUAGE_BHOJPURI=102,
    E_LANGUAGE_BIHARI=103,
    E_LANGUAGE_BIKOL=104,
    E_LANGUAGE_BINI=105,
    E_LANGUAGE_BISLAMA=106,
    E_LANGUAGE_BOSNIAN=107,
    E_LANGUAGE_BRAJ=108,
    E_LANGUAGE_BRETON=109,
    E_LANGUAGE_BUGINESE=110,
    E_LANGUAGE_BURIAT=111,
    E_LANGUAGE_BURMESE=112,
    E_LANGUAGE_BLIN=113,
    E_LANGUAGE_BYELORUSSIAN=114,
    E_LANGUAGE_CADDO=115,
    E_LANGUAGE_CARIB=116,
    E_LANGUAGE_CATALAN=117,
    E_LANGUAGE_CAUCASIAN=118,
    E_LANGUAGE_CEBUANO=119,
    E_LANGUAGE_CELTIC=120,
    E_LANGUAGE_CENTRALAMERICANINDIAN=121,
    E_LANGUAGE_CHAGATAI=122,
    E_LANGUAGE_CHAMORRO=123,
    E_LANGUAGE_CHECHEN=124,
    E_LANGUAGE_CHEROKEE=125,
    E_LANGUAGE_CHEYENNE=126,
    E_LANGUAGE_CHIBCHA=127,
    E_LANGUAGE_CHINOOKJARGON=128,
    E_LANGUAGE_CHOCTAW=129,
    E_LANGUAGE_CHIPEWYAN=130,
    E_LANGUAGE_CHURCHSLAVIC=131,
    E_LANGUAGE_CHUVASH=132,
    E_LANGUAGE_COPTIC=133,
    E_LANGUAGE_CORNISH=134,
    E_LANGUAGE_CORSICAN=135,
    E_LANGUAGE_CREE=136,
    E_LANGUAGE_CREEK=137,
    E_LANGUAGE_CREOLESANDPIDGINS=138,
    E_LANGUAGE_CRIMEANTATAR=139,
    E_LANGUAGE_CREOLESANDPIDGINSENGLISH=140,
    E_LANGUAGE_CREOLESANDPIDGINSFRENCH=141,
    E_LANGUAGE_CREOLESANDPIDGINSPORTUGUESE=142,
    E_LANGUAGE_KASHUBIAN=143,
    E_LANGUAGE_CUSHITIC=144,
    E_LANGUAGE_DAKOTA=145,
    E_LANGUAGE_DELAWARE=146,
    E_LANGUAGE_SLAVEY=147,//ISO 639 中有North Slavey;South Slavey（不确定对应哪种语言，UI未使用，暂时废弃）
    E_LANGUAGE_DOGRIB=148,
    E_LANGUAGE_DHIVEHI=149,
    E_LANGUAGE_DINKA=150,
    E_LANGUAGE_DIVEHI=151,
    E_LANGUAGE_DOGRI=152,
    E_LANGUAGE_DRAVIDIAN=153,
    E_LANGUAGE_SORBIANLOWER=154,
    E_LANGUAGE_DUALA=155,
    E_LANGUAGE_DUTCHMIDDLE=156,
    E_LANGUAGE_DYULA=157,
    E_LANGUAGE_DZONGKHA=158,
    E_LANGUAGE_EFIK=159,
    E_LANGUAGE_EGYPTIAN=160,
    E_LANGUAGE_EKAJUK=161,
    E_LANGUAGE_ELAMITE=162,
    E_LANGUAGE_ENGLISHMIDDLE=163,
    E_LANGUAGE_ENGLISHOLD=164,
    E_LANGUAGE_ANGIKA=165,
    E_LANGUAGE_ESKIMO=166,
    E_LANGUAGE_ESPERANTO=167,
    E_LANGUAGE_EWE=168,
    E_LANGUAGE_EWONDO=169,
    E_LANGUAGE_FANG=170,
    E_LANGUAGE_FANTI=171,
    E_LANGUAGE_FAROESE=172,
    E_LANGUAGE_FIJIAN=173,
    E_LANGUAGE_FILIPINO=174,
    E_LANGUAGE_FINNOUGRIAN=175,
    E_LANGUAGE_FON=176,
    E_LANGUAGE_FRENCHMIDDLE=177,
    E_LANGUAGE_FRENCHOLD=178,
    E_LANGUAGE_FRISIANNORTHERN=179,
    E_LANGUAGE_FRISIANEASTERN=180,
    E_LANGUAGE_FRISIAN=181,
    E_LANGUAGE_FULAH=182,
    E_LANGUAGE_FRIULIAN=183,
    E_LANGUAGE_GA=184,
    E_LANGUAGE_GALLEGAN=185,
    E_LANGUAGE_GANDA=186,
    E_LANGUAGE_GAYO=187,
    E_LANGUAGE_GEEZ=188,
    E_LANGUAGE_GEORGIAN=189,
    E_LANGUAGE_GERMANMIDDLEHIGH=190,
    E_LANGUAGE_GERMANOLDHIGH=191,
    E_LANGUAGE_GORONTALO=192,
    E_LANGUAGE_GERMANIC=193,
    E_LANGUAGE_GILBERTESE=194,
    E_LANGUAGE_GONDI=195,
    E_LANGUAGE_GOTHIC=196,
    E_LANGUAGE_GREBO=197,
    E_LANGUAGE_GREEKANCIENT=198,
    E_LANGUAGE_GREENLANDIC=199,
    E_LANGUAGE_GUARANI=200,
    E_LANGUAGE_SWISSGERMAN=201,
    E_LANGUAGE_GUJARATI=202,
    E_LANGUAGE_GWICHIN=203,
    E_LANGUAGE_HAIDA=204,
    E_LANGUAGE_HAITIANCREOLE=205, //与E_LANGUAGE_HAITI = 504 一样，暂时废弃
    E_LANGUAGE_HAUSA=206,
    E_LANGUAGE_HAWAIIAN=207,
    E_LANGUAGE_HERERO=208,
    E_LANGUAGE_HILIGAYNON=209,
    E_LANGUAGE_HIMACHALI=210,
    E_LANGUAGE_HIRIMOTU=211,
    E_LANGUAGE_HUPA=212,
    E_LANGUAGE_IBAN=213,
    E_LANGUAGE_ICELANDIC=214,
    E_LANGUAGE_IDO=215,
    E_LANGUAGE_NUOSU=216,
    E_LANGUAGE_IGBO=217,
    E_LANGUAGE_IJO=218,
    E_LANGUAGE_ILOKO=219,
    E_LANGUAGE_INDIC=220,
    E_LANGUAGE_INDOEUROPEAN=221,
    E_LANGUAGE_INGUSH=222,
    E_LANGUAGE_INDONESIAN=223,
    E_LANGUAGE_INTERLINGUA=224,
    E_LANGUAGE_INTERLINGUE=225,//与E_LANGUAGE_INDOEUROPEAN=221一样,暂时废弃
    E_LANGUAGE_INUKTITUT=226,
    E_LANGUAGE_INUPIAK=227,
    E_LANGUAGE_IRANIAN=228,
    E_LANGUAGE_IRISHOLD=229,
    E_LANGUAGE_IRISHMIDDLE=230,
    E_LANGUAGE_IROQUOIAN=231,
    E_LANGUAGE_JAPANESE=232,
    E_LANGUAGE_JAVANESE=233,
    E_LANGUAGE_LOJBAN=234,
    E_LANGUAGE_JUDEOARABIC=235,
    E_LANGUAGE_JUDEOPERSIAN=236,
    E_LANGUAGE_KABYLE=237,
    E_LANGUAGE_KACHIN=238,
    E_LANGUAGE_KAMBA=239,
    E_LANGUAGE_KANNADA=240,
    E_LANGUAGE_KANURI=241,
    E_LANGUAGE_KARAKALPAK=242,
    E_LANGUAGE_KAREN=243,
    E_LANGUAGE_KASHMIRI=244,
    E_LANGUAGE_KAWI=245,
    E_LANGUAGE_KAZAKH=246,
    E_LANGUAGE_CIRCASSIAN=247,//未找到出处，UI与中间件未使用，废弃掉
    E_LANGUAGE_KHASI=248,
    E_LANGUAGE_KHMER=249,
    E_LANGUAGE_KHOISAN=250,
    E_LANGUAGE_KHOTANESE=251,
    E_LANGUAGE_KIKUYU=252,
    E_LANGUAGE_KINYARWANDA=253,
    E_LANGUAGE_KIRGHIZ=254,
    E_LANGUAGE_KIMBUNDU=255,
    E_LANGUAGE_KOMI=256,
    E_LANGUAGE_KONGO=257,
    E_LANGUAGE_KONKANI=258,
    E_LANGUAGE_KPELLE=259,
    E_LANGUAGE_KARACHAYBALKAR=260,
    E_LANGUAGE_KARELIAN=261,
    E_LANGUAGE_KRU=262,
    E_LANGUAGE_KUANYAMA=263,
    E_LANGUAGE_KUMYK=264,
    E_LANGUAGE_KURDISH=265,
    E_LANGUAGE_KURUKH=266,
    E_LANGUAGE_KUSAIE=267,
    E_LANGUAGE_KUTENAI=268,
    E_LANGUAGE_LADINO=269,
    E_LANGUAGE_LAHNDA=270,
    E_LANGUAGE_LAMBA=271,
    E_LANGUAGE_LANGUE=272,
    E_LANGUAGE_LAO=273,
    E_LANGUAGE_LATIN=274,
    E_LANGUAGE_LETZEBURGESCH=275,
    E_LANGUAGE_LEZGHIAN=276,
    E_LANGUAGE_LIMBURGISH=277,
    E_LANGUAGE_LINGALA=278,
    E_LANGUAGE_LITHUANIAN=279,
    E_LANGUAGE_LOZI=280,
    E_LANGUAGE_LUBALULUA=281,
    E_LANGUAGE_LUBAKATANGA=282,
    E_LANGUAGE_LUISENO=283,
    E_LANGUAGE_LUNDA=284,
    E_LANGUAGE_LUO=285,
    E_LANGUAGE_LUSHAI=286,
    E_LANGUAGE_MACEDONIAN=287,
    E_LANGUAGE_MADURESE=288,
    E_LANGUAGE_MAGAHI=289,
    E_LANGUAGE_MAITHILI=290,
    E_LANGUAGE_MAKASAR=291,
    E_LANGUAGE_MALAGASY=292,
    E_LANGUAGE_MALAY=293,
    E_LANGUAGE_MOKSHA=294,
    E_LANGUAGE_MANDAR=295,
    E_LANGUAGE_MALAYALAM=296,
    E_LANGUAGE_MALTESE=297,
    E_LANGUAGE_MANCHU=298,
    E_LANGUAGE_MANDINGO=299,
    E_LANGUAGE_MANIPURI=300,
    E_LANGUAGE_MANOBO=301,
    E_LANGUAGE_MANX=302,
    E_LANGUAGE_MARATHI=303,
    E_LANGUAGE_MARI=304,
    E_LANGUAGE_MARSHALL=305,
    E_LANGUAGE_MIRANDESE=306,
    E_LANGUAGE_MARWARI=307,
    E_LANGUAGE_MASAI=308,
    E_LANGUAGE_MAYAN=309,
    E_LANGUAGE_ERZYA=310,
    E_LANGUAGE_MENDE=311,
    E_LANGUAGE_MICMAC=312,
    E_LANGUAGE_MINANGKABAU=313,
    E_LANGUAGE_MISCELLANEOUS=314,
    E_LANGUAGE_MOHAWK=315,
    E_LANGUAGE_MOLDAVIAN=316, //与 E_LANGUAGE_ROMANIAN=19重复，UI未使用，废弃掉
    E_LANGUAGE_MONKMER=317,
    E_LANGUAGE_MONGO=318,
    E_LANGUAGE_MONGOLIAN=319,
    E_LANGUAGE_MOSSI=320,
    E_LANGUAGE_MULTIPLE=321,
    E_LANGUAGE_MUNDA=322,
    E_LANGUAGE_NEAPOLITAN=323,
    E_LANGUAGE_NAURU=324,
    E_LANGUAGE_NAVAJO=325,
    E_LANGUAGE_NDEBELENORTH=326,
    E_LANGUAGE_NDEBELESOUTH=327,
    E_LANGUAGE_NDONGO=328,
    E_LANGUAGE_GERMANLOW=329,
    E_LANGUAGE_NEPALI=330,
    E_LANGUAGE_NEWARI=331,
    E_LANGUAGE_NIAS=332,
    E_LANGUAGE_NIGERKORDOFANIAN=333,
    E_LANGUAGE_NILOSAHARAN=334,
    E_LANGUAGE_NIUEAN=335,
    E_LANGUAGE_NORWEGIANBOKMAL=336,
    E_LANGUAGE_NOGAI=337,
    E_LANGUAGE_NORSEOLD=338,
    E_LANGUAGE_NORTHAMERICANINDIAN=339,
    E_LANGUAGE_NORWEGIANNYNORSK=340,
    E_LANGUAGE_NUBIAN=341,
    E_LANGUAGE_NYAMWEZI=342,
    E_LANGUAGE_NEWARICLASSICAL=343,
    E_LANGUAGE_NYANJA=344,
    E_LANGUAGE_NYANKOLE=345,
    E_LANGUAGE_NYORO=346,
    E_LANGUAGE_NZIMA=347,
    E_LANGUAGE_OJIBWA=348,
    E_LANGUAGE_ORIYA=349,
    E_LANGUAGE_OROMO=350,
    E_LANGUAGE_OSAGE=351,
    E_LANGUAGE_OSSETIC=352,
    E_LANGUAGE_OTOMIAN=353,
    E_LANGUAGE_PAHLAVI=354,
    E_LANGUAGE_PALAUAN=355,
    E_LANGUAGE_PALI=356,
    E_LANGUAGE_PAMPANGA=357,
    E_LANGUAGE_PANGASINAN=358,
    E_LANGUAGE_PANJABI=359,
    E_LANGUAGE_PAPIAMENTO=360,
    E_LANGUAGE_PAPUANAUSTRALIAN=361,
    E_LANGUAGE_PERSIAN=362,
    E_LANGUAGE_PERSIANOLD=363,
    E_LANGUAGE_PHOENICIAN=364,
    E_LANGUAGE_PHILIPPINE=365,
    E_LANGUAGE_PONAPE=366,
    E_LANGUAGE_PRAKRIT=367,
    E_LANGUAGE_PROVENCALOLD=368,
    E_LANGUAGE_PUSHTO=369,
    E_LANGUAGE_QUECHUA=370,
    E_LANGUAGE_RHAETOROMANCE=371,
    E_LANGUAGE_RAJASTHANI=372,
    E_LANGUAGE_RAPANUI=373,
    E_LANGUAGE_RAROTONGAN=374,
    E_LANGUAGE_ROMANCE=375,
    E_LANGUAGE_ROMANY=376,
    E_LANGUAGE_RUNDI=377,
    E_LANGUAGE_AROMANIAN=378,
    E_LANGUAGE_SALISHAN=379,
    E_LANGUAGE_SAMARITANARAMAIC=380,
    E_LANGUAGE_SAMISOUTHERN=381,
    E_LANGUAGE_SAMINORTHERN=382,
    E_LANGUAGE_SAMI=383,
    E_LANGUAGE_LULESAMI=384,
    E_LANGUAGE_INARISAMI=385,
    E_LANGUAGE_SAMOAN=386,
    E_LANGUAGE_SKOLTSAMI=387,
    E_LANGUAGE_SANDAWE=388,
    E_LANGUAGE_SANGO=389,
    E_LANGUAGE_SANSKRIT=390,
    E_LANGUAGE_SARDINIAN=391,
    E_LANGUAGE_SASAK=392,
    E_LANGUAGE_SANTALI=393,
    E_LANGUAGE_SICILIAN=394,
    E_LANGUAGE_SCOTS=395,
    E_LANGUAGE_SELKUP=396,
    E_LANGUAGE_SEMITIC=397,
    E_LANGUAGE_SRANANTONGO=398,
    E_LANGUAGE_SERBOCROATIAN=399,
    E_LANGUAGE_SERER=400,
    E_LANGUAGE_SIGN=401,
    E_LANGUAGE_SHAN=402,
    E_LANGUAGE_SHONA=403,
    E_LANGUAGE_SIDAMO=404,
    E_LANGUAGE_SIKSIKA=405,
    E_LANGUAGE_SINDHI=406,
    E_LANGUAGE_SONINKE=407,
    E_LANGUAGE_SINGHALESE=408,
    E_LANGUAGE_SINOTIBETAN=409,
    E_LANGUAGE_SIOUAN=410,
    E_LANGUAGE_SLAVIC=411,
    E_LANGUAGE_SISWANT=412,
    E_LANGUAGE_SOGDIAN=413,
    E_LANGUAGE_SOMALI=414,
    E_LANGUAGE_SONGHAI=415,
    E_LANGUAGE_SORBIAN=416,
    E_LANGUAGE_WALLOON=417,
    E_LANGUAGE_NKO=418,//未找到出处，UI与中间件未使用，废弃掉
    E_LANGUAGE_SOTHONORTHERN=419,
    E_LANGUAGE_SOTHOSOUTHERN=420,
    E_LANGUAGE_SOUTHAMERICANINDIAN=421,
    E_LANGUAGE_SUKUMA=422,
    E_LANGUAGE_SUMERIAN=423,
    E_LANGUAGE_SUDANESE=424,
    E_LANGUAGE_SUSU=425,
    E_LANGUAGE_SWAHILI=426,
    E_LANGUAGE_SWAZI=427,
    E_LANGUAGE_SWIZE=428,//未找到出处，UI与中间件未使用，废弃掉
    E_LANGUAGE_SYRIACCLASSICAL=429,
    E_LANGUAGE_SYRIAC=430,
    E_LANGUAGE_TAGALOG=431,
    E_LANGUAGE_TAHITIAN=432,
    E_LANGUAGE_TETUM=433,
    E_LANGUAGE_TAJIK=434,
    E_LANGUAGE_TAMASHEK=435,
    E_LANGUAGE_TAI=436,
    E_LANGUAGE_TAMIL=437,
    E_LANGUAGE_TATAR=438,
    E_LANGUAGE_TELETEXT=439,
    E_LANGUAGE_TELUGU=440,
    E_LANGUAGE_TERENO=441,
    E_LANGUAGE_THAI=442,
    E_LANGUAGE_TIBETAN=443,
    E_LANGUAGE_TIGRE=444,
    E_LANGUAGE_TIGRINYA=445,
    E_LANGUAGE_TIMNE=446,
    E_LANGUAGE_TIVI=447,
    E_LANGUAGE_KLINGON=448,
    E_LANGUAGE_TOKELAU=449,
    E_LANGUAGE_TLINGIT=450,
    E_LANGUAGE_TONGANYASA=451,
    E_LANGUAGE_TONGAISLANDS=452,
    E_LANGUAGE_TRUK=453,
    E_LANGUAGE_TOKPISIN=454,
    E_LANGUAGE_TSIMSHIAN=455,
    E_LANGUAGE_TSONGA=456,
    E_LANGUAGE_TSWANA=457,
    E_LANGUAGE_TUMBUKA=458,
    E_LANGUAGE_TUPIAN=459,//E_LANGUAGE_TUPIAN未找到，UI确认未使用，暂时废弃掉
    E_LANGUAGE_TURKISHOTTOMAN=460,
    E_LANGUAGE_TURKMEN=461,
    E_LANGUAGE_TUVINIAN=462,
    E_LANGUAGE_TUVALU=463,
    E_LANGUAGE_TWI=464,
    E_LANGUAGE_UDMURT=465,
    E_LANGUAGE_UGARITIC=466,
    E_LANGUAGE_UIGHUR=467,
    E_LANGUAGE_UKRAINIAN=468,
    E_LANGUAGE_UMBUNDU=469,
    E_LANGUAGE_URDU=470,
    E_LANGUAGE_UZBEK=471,
    E_LANGUAGE_VAI=472,
    E_LANGUAGE_VENDA=473,
    E_LANGUAGE_VIETNAMESE=474,
    E_LANGUAGE_VOLAPUK=475,
    E_LANGUAGE_VOTIC=476,
    E_LANGUAGE_WAKASHAN=477,
    E_LANGUAGE_WALAMO=478,
    E_LANGUAGE_WARAY=479,
    E_LANGUAGE_WASHO=480,
    E_LANGUAGE_WOLOF=481,
    E_LANGUAGE_KALMYK=482,
    E_LANGUAGE_XHOSA=483,
    E_LANGUAGE_YAKUT=484,
    E_LANGUAGE_YAO=485,
    E_LANGUAGE_YAP=486,
    E_LANGUAGE_YIDDISH=487,
    E_LANGUAGE_YORUBA=488,
    E_LANGUAGE_YUPIK=489,
    E_LANGUAGE_ZAPOTEC=490,
    E_LANGUAGE_BLISSYMBOLICS=491,
    E_LANGUAGE_ZENAGA=492,
    E_LANGUAGE_ZHUANG=493,
    E_LANGUAGE_ZANDE=494,
    E_LANGUAGE_ZULU=495,
    E_LANGUAGE_ZUNI=496,
    E_LANGUAGE_ZAZAKI=497,
    E_LANGUAGE_VALENCIAN=498,//与(E_LANGUAGE_VALENCIAN=117)语言枚举重复，UI未使用，废弃掉该枚举
    E_LANGUAGE_CHINESE_TRADITIONAL=499,    /*chinese traditional add by wangzliang 2015/07/13*/
    E_LANGUAGE_CHINESE_S=500, //CHS 
    E_LANGUAGE_QAB = 501,
    E_LANGUAGE_QAC = 502,
	E_LANGUAGE_ARABIC_EGYPT= 503,
	E_LANGUAGE_HAITI = 504,
	E_LANGUAGE_KOREAN_NORTH= 505,    
	E_LANGUAGE_DAGBANI = 506,//Dagbani 达戈姆巴 加纳北部地区
	E_LANGUAGE_KASEM = 507, //Kasem
	E_LANGUAGE_CHINESE_TW = 508,
	E_LANGUAGE_CHINESE_HK = 509,
	E_LANGUAGE_CHINESE_US = 510,
	E_LANGUAGE_CHINESE_SG = 511,
	E_LANGUAGE_CHINESE_MY = 512,
    E_LANGUAGE_NUM,           //Language maximum
    E_LANGUAGE_MAX = 0xFFFF
} MEMBER_LANGUAGE;


/*sound ststem type*/
//typedef enum tag_sound_system
//{
//	SOUND_SYSTEM_DK = 0,    /* DK */
//	SOUND_SYSTEM_BG,        /* BG */
//	SOUND_SYSTEM_I,         /* I */
//	SOUND_SYSTEM_M	        /*M*/
//}sound_system_type;


/*color system type.*/

typedef enum
{
	FPI_ES_VIDEO_MPEG2    =    1,
	FPI_ES_VIDEO_H264     =    2,
	FPI_ES_VIDEO_AVS      =    3,
	FPI_ES_VIDEO_VC1      =    4,
	FPI_ES_VIDEO_MPEG4    =    5,
	FPI_ES_VIDEO_AVSP     =    6,
	FPI_ES_AUDIO_MPEG     =    11,
	FPI_ES_AUDIO_AAC      =    12,
	FPI_ES_AUDIO_AC3      =    13,
	FPI_ES_AUDIO_AACP     =    14,
	FPI_ES_AUDIO_AC3P     =    15,
	FPI_ES_AUDIO_DTS      =    16,
	FPI_ES_VIDEO_MP3      =    17,
	FPI_ES_AUDIO_MPEG4    =    18,
	FPI_ES_AUDIO_DRA      =    19,
	FPI_ES_AUDIO_PCM      =    20,
	FPI_ES_VIDEO_H265	  =	   21,
}EN_FPI_AV_DECODER_ES_TYPE_T;

typedef enum
{
	FPI_AUDIOMODE_STEREO=    0x00,
	FPI_AUDIOMODE_LL        =0x01,
	FPI_AUDIOMODE_RR        =0x02,
}EN_FPI_DECODER_AUDIO_TRACK_TYPE_T;


/*伴音制式*/
typedef enum 
{
    EN_AUDIOSTANDARD_BG_                     = 0x00,
    EN_AUDIOSTANDARD_BG_A2_                  = 0x01,
    EN_AUDIOSTANDARD_BG_NICAM_               = 0x02,
    EN_AUDIOSTANDARD_I_                      = 0x03,
    EN_AUDIOSTANDARD_DK_                     = 0x04,
    EN_AUDIOSTANDARD_DK1_A2_                 = 0x05,
    EN_AUDIOSTANDARD_DK2_A2_                 = 0x06,
    EN_AUDIOSTANDARD_DK3_A2_                 = 0x07,
    EN_AUDIOSTANDARD_DK_NICAM_               = 0x08,
    EN_AUDIOSTANDARD_L_                      = 0x09,
    EN_AUDIOSTANDARD_LP_                     = 0x0A,
    EN_AUDIOSTANDARD_M_                      = 0x0B,
    EN_AUDIOSTANDARD_M_BTSC_                 = 0x0C,
    EN_AUDIOSTANDARD_M_A2_                   = 0x0D,
    EN_AUDIOSTANDARD_M_EIA_J_                = 0x0E,
    EN_AUDIOSTANDARD_NOTSTANDARD_            = 0x0F,
    EN_AUDIOSTANDARD_AUTO_                   = 0x10,
	EN_AUDIOSTANDARD_N                 		 = 0x11,
    EN_AUDIOSTANDART_MAX               
} EN_FPP_SOUND_SYSTEM_TYPE_T;


/*彩色制式*/

typedef enum 
{
    EN_VIDEOSTANDARD_PAL_BGHI        = 0x00,
    EN_VIDEOSTANDARD_NTSC_M          = 0x01,
    EN_VIDEOSTANDARD_SECAM           = 0x02,
    EN_VIDEOSTANDARD_NTSC_44         = 0x03,
    EN_VIDEOSTANDARD_PAL_M           = 0x04,
    EN_VIDEOSTANDARD_PAL_N           = 0x05,
    EN_VIDEOSTANDARD_PAL_60          = 0x06,
    EN_VIDEOSTANDARD_NOTSTANDARD     = 0x07,
    EN_VIDEOSTANDARD_AUTO            = 0x08,
    EN_VIDEOSTANDARD_MAX
} EN_FPP_COLOR_SYSTEM_TYPE_T;


/**
@brief 控制逻辑
*/
typedef enum
{
	EN_CONTROL_TYPE_START = 0, 
	EN_CONTROL_TYPE_STOP,  
	EN_CONTROL_TYPE_PAUSE,
	EN_CONTROL_TYPE_RESUME,
} EN_CONTROL_TYPE_T;





///system detect audio mts mode
typedef enum
{
    EN_DET_MTS_INVALID,
    EN_DET_MTS_MONO,            //PAL(BG/DK/I)-Mono, Korea(M)-Mono
    EN_DET_MTS_DUAL_BGDKI,      //PAL(BG/DK/I)-Dual, 
    EN_DET_MTS_DUAL_KOREA,      //Korea(M)- Dual
    EN_DET_MTS_STEREO_BGDKI,    //PAL(BG/DK/I)-Stereo
    EN_DET_MTS_STEREO_KOREA,    //Korea(M)-Dual
    EN_DET_MTS_NICAM_MONO,      //NICAM(BG/DK/I/L)-Mono
    EN_DET_MTS_NICAM_DUAL,      //NICAM(BG/DK/I/L)-Dual
    EN_DET_MTS_NICAM_STEREO,    //NICAM(BG/DK/I/L)-Stereo
    EN_DET_MTS_BTSC_MONO,       //BTSC - Mono
    EN_DET_MTS_BTSC_SAP,		//BTSC - SAP
    EN_DET_MTS_BTSC_STEREO,		//BTSC - Stereo
    EN_DET_MTS_BTSC_STEREO_SAP,	//BTSC - Stereo+SAP
	EN_DET_MTS_MAX
}EN_SOUND_MTS_DETECT_T;

/*丽音模式*/
typedef enum
{
    EN_FPP_MTS_INVALID                    = 0x00,
    EN_FPP_MTS_MONO                       = 0x01,
    EN_FPP_MTS_FORCED_MONO                = 0x02,
    EN_FPP_MTS_G_STEREO                   = 0x03,
    EN_FPP_MTS_K_STEREO                   = 0x04,
    EN_FPP_MTS_MONO_SAP                   = 0x05,
    EN_FPP_MTS_STEREO_SAP                 = 0x06,
    EN_FPP_MTS_DUAL_A                     = 0x07,
    EN_FPP_MTS_DUAL_B                     = 0x08,
    EN_FPP_MTS_DUAL_AB                    = 0x09,
    EN_FPP_MTS_NICAM_MONO                 = 0x0A,
    EN_FPP_MTS_NICAM_STEREO               = 0x0B,
    EN_FPP_MTS_NICAM_DUAL_A               = 0x0C,
    EN_FPP_MTS_NICAM_DUAL_B               = 0x0D,
    EN_FPP_MTS_NICAM_DUAL_AB              = 0x0E,
    EN_FPP_MTS_HIDEV_MONO                 = 0x0F,
    EN_FPP_MTS_LEFT_LEFT                  = 0x10,
    EN_FPP_MTS_RIGHT_RIGHT                = 0x11,
    EN_FPP_MTS_LEFT_RIGHT                 = 0x12,
    
} EN_FPP_AUDIO_MTS_TYPE_T;


typedef enum   
{
    IF_SOUND_AUTO,
    IF_SOUND_BG,
    IF_SOUND_I,
    IF_SOUND_DK,
    IF_SOUND_L,
    IF_SOUND_LL,
    IF_SOUND_M,

    IF_SOUND_NUMS
}IF_SOUND_SYSTEM;

typedef enum
{
    FPP_TUNE_MODE_SEARCH = 0,               //搜台模式
    FPP_TUNE_MODE_PLAY = 1                  //播放模式
}EN_ATV_TUNE_MODE_T;


/*IF Sound System 枚举类型*/
typedef enum{
    EN_CHANNEL_IF_SOUND_AUTO,
    EN_CHANNEL_IF_SOUND_BG,
    EN_CHANNEL_IF_SOUND_I,
    EN_CHANNEL_IF_SOUND_DK,
    EN_CHANNEL_IF_SOUND_L,
    EN_CHANNEL_IF_SOUND_LL,
    EN_CHANNEL_IF_SOUND_M,    
}EN_FPP_IF_SOUND_SYSTEM_T;



typedef enum
{
    EN_DTV_SOUND_MODE_LEFT,
    EN_DTV_SOUND_MODE_RIGHT,
    EN_DTV_SOUND_MODE_STEREO,
    EN_DTV_SOUND_MODE_MAX
} DTV_SOUND_MODE_e;

//added by luhm 2015.01.27 for new volume
/**
声音输出设备的类型
*/
typedef enum
{
    EN_AUDIO_DEVICE_TYPE_MAIN       		= 1 << 0,   ///< 主声音设备，即内置喇叭
    EN_AUDIO_DEVICE_TYPE_HEADPHONE  		= 1 << 1,   ///< 耳机
    EN_AUDIO_DEVICE_TYPE_CAPTURE   		    = 1 << 2,   ///< 声音抓取,eg:Bluetooth
    EN_AUDIO_DEVICE_TYPE_SPDIF      		= 1 << 3,   ///< 外置功放
    EN_AUDIO_DEVICE_TYPE_AVOUT			    = 1 << 4,	///< AVOUT
    EN_AUDIO_DEVICE_TYPE_AMP				= 1 << 5,	///< 功率放大器,just for speaker
    EN_AUDIO_DEVICE_TYPE_ARC				= 1 << 6,	///< ARC
    EN_AUDIO_DEVICE_TYPE_INPUT_SOURCE		= 1 << 7,	///< 虚拟音频设备,只用来处理前端MUTE,Virtual Audio Device,just for frontend mute.
	EN_AUDIO_DEVICE_TYPE_FFVR_ENGINE		= 1 << 8,   ///< 远场语音开关
    EN_AUDIO_DEVICE_TYPE_MAX				,
    EN_AUDIO_DEVICE_TYPE_ALL_EXCEPT_AMP 	= EN_AUDIO_DEVICE_TYPE_MAIN|EN_AUDIO_DEVICE_TYPE_HEADPHONE|EN_AUDIO_DEVICE_TYPE_CAPTURE|EN_AUDIO_DEVICE_TYPE_SPDIF|EN_AUDIO_DEVICE_TYPE_AVOUT|EN_AUDIO_DEVICE_TYPE_ARC,
    EN_AUDIO_DEVICE_TYPE_ALL				= EN_AUDIO_DEVICE_TYPE_MAIN|EN_AUDIO_DEVICE_TYPE_HEADPHONE|EN_AUDIO_DEVICE_TYPE_CAPTURE|EN_AUDIO_DEVICE_TYPE_SPDIF|EN_AUDIO_DEVICE_TYPE_AVOUT|EN_AUDIO_DEVICE_TYPE_AMP|EN_AUDIO_DEVICE_TYPE_ARC,
}EN_AUDIO_DEVICE_TYPE;

/**
声音输入类型
*/
typedef enum
{
    EN_AUDIO_INPUT_TYPE_MAIN      	= 1 << 0,   ///< 主声音
    EN_AUDIO_INPUT_TYPE_AD          	= 1 << 1,   ///< AD声音,即audio description
    EN_AUDIO_INPUT_TYPE_MAX,
    EN_AUDIO_UNPUT_TYPE_ALL	   	= EN_AUDIO_INPUT_TYPE_MAIN|EN_AUDIO_INPUT_TYPE_AD,
}EN_AUDIO_INPUT_TYPE;
//luhm_end

typedef enum
{
	EN_FPI_AUDIO_CHANNEL_OFF = 1 << 0,
	EN_FPI_AUDIO_CHANNEL_NORMAL = 1 << 1, ///<TV通道的声音，即各个信源本身的声音
	EN_FPI_AUDIO_CHANNEL_AD = 1 << 2,///<AD和TV通道的声音
	EN_FPI_AUDIO_CHANNEL_MAX
}EN_FPI_AUDIO_DECODER_CHANNEL_TYPE;

/**
@brief Audio DSP中与音效相关的算法枚举常量
*/
typedef enum
{
	EN_FPI_AUDIO_DSP_INTELLIGENT_VOLUME = 0,///>智能音量算法开关
	EN_FPI_AUDIO_DSP_VIRTUAL_BASS,///>虚拟低音算法开关
	EN_FPI_AUDIO_DSP_ALGORITHM_MAX,

} EN_FPI_AUDIO_DSP_ALGORITHM_T;


typedef enum
{
	EN_FPI_AUDIO_OUTPUT_OFF = 0x0,
	EN_FPI_AUDIO_OUTPUT_ON
}EN_FPI_AUDIO_DEVICE_OUTPUT_STATUS;

typedef enum
{
	EN_POWER_SUSPEND_SUPPORT_NONE,
	EN_POWER_SUSPEND_SUPPORT_STR,
	EN_POWER_SUSPEND_SUPPORT_STD,
	EN_POWER_SUSPEND_SUPPORT_NUM
}EN_POWER_SUSPEND_SUPPORT;  //

typedef enum
{
	EN_POWER_SUSPEND_MODE_NONE,     	//normal work  mode, 
	EN_POWER_SUSPEND_MODE_STR_SUSPEND,		//suspend mode
	EN_POWER_SUSPEND_MODE_STR_RESUME,
	EN_POWER_SUSPEND_MODE_STD_SUSPEND,			//std mode
	EN_POWER_SUSPEND_MODE_STD_RESUME,
	EN_POWER_SUSPEND_MODE_NUM
}EN_POWER_SUSPEND_WORK_MODE;


#define BOARD_INPUTMUX_NUM	FPI_INPUT_SOURCE_NUM
//#define FPI_ASSERT(x)						(assert(x))

typedef struct 
{
    uint32_t u32EnablePort;
    uint32_t u32Port[2];
} FPI_VIDEO_INPUTSRCTABLE;

#define _BIT0_  0x0001
#define _BIT1_  0x0002
#define _BIT2_  0x0004
#define _BIT3_  0x0008
#define _BIT4_  0x0010
#define _BIT5_  0x0020
#define _BIT6_  0x0040
#define _BIT7_  0x0080
#define _BIT8_  0x0100
#define _BIT9_  0x0200
#define _BIT10_ 0x0400
#define _BIT11_ 0x0800
#define _BIT12_ 0x1000
#define _BIT13_ 0x2000
#define _BIT14_ 0x4000
#define _BIT15_ 0x8000

#ifndef UNUSED //to avoid compile warnings...
#define UNUSED(var) (void)((var) = (var))
#endif


/// the service type
typedef enum
{
    EN_SERVICETYPE_ATV              = 0x00,      ///< Service type ATV ,should not change for user data
    EN_SERVICETYPE_DTV              = 0x01,      ///< Service type DTV,should not change for user data
    EN_SERVICETYPE_RADIO            = 0x02,      ///< Service type Radio,should not change for user data
    EN_SERVICETYPE_DATA             = 0x03,        ///< Service type Data,should not change for user data
    EN_SERVICETYPE_UNITED_TV        = 0x04,      ///< Service type United TV
    EN_SERVICETYPE_INVALID          = 0x05,      ///< Service type INVALID
    EN_SERVICETYPE_DOWNLOAD         = 0x06,      ///< Service type For download
} EN_MEMBER_SERVICETYPE;

typedef enum
{
    EN_FINE_TUNE_DOWN,
    EN_FINE_TUNE_UP,
    EN_FINE_TUNE_MAX,
}EN_FINE_TUNE_MODE;


typedef enum
{
	EN_FPP_BOARD_OS_NONE,
	EN_FPP_BOARD_OS_LINUX,
	EN_FPP_BOARD_OS_ANDROID,
}EN_FPP_BOARD_OS_T;

typedef enum
{
    EN_FPP_BOARD_AREA_CN,
    EN_FPP_BOARD_AREA_EU,
    EN_FPP_BOARD_AREA_AU,
    EN_FPP_BOARD_AREA_LA,
}EN_FPP_BOARD_AREA_T;


typedef enum
{
    EN_TYPE_DEFAULT = 0,
    EN_TYPE_IKEA  = 200,
    EN_TYPE_TOSHIBA = 400,
}EN_TYPE;


typedef enum
{
    EN_KEYBOARD_ENGLISH,
    EN_KEYBOARD_FRENCH,
    EN_KEYBOARD_PORTUGUESE,
	EN_KEYBOARD_SPANISH,
	EN_KEYBOARD_GERMAN,
	EN_KEYBOARD_POLISH,
	EN_KEYBOARD_SWEDISH,
	EN_KEYBOARD_ITALIAN,
	EN_KEYBOARD_RUSSIAN,
	EN_KEYBOARD_CZECH,
	EN_KEYBOARD_DUTCH,
	EN_KEYBOARD_NORWEGIAN,
	EN_KEYBOARD_ROMANIAN,
	EN_KEYBOARD_SLOVAK,
	EN_KEYBOARD_SLOVENIAN,
	EN_KEYBOARD_SERBIAN,
	EN_KEYBOARD_FINNISH,
	EN_KEYBOARD_TURKISH,
	EN_KEYBOARD_GREEK,
	EN_KEYBOARD_BULGARIAN,
	EN_KEYBOARD_LATVIAN,
	EN_KEYBOARD_LITHUANIAN,
	EN_KEYBOARD_ESTONIAN,
	EN_KEYBOARD_UKRAINIAN,
    EN_KEYBOARD_LANG_MAX
} EN_CURRENT_KEYBOARD_LANG;

//#ifndef FPI_CIPLUS
//#define FPI_CIPLUS
//#endif

/*HDMI输入信号格式*/
typedef enum
{
	EN_HDMI_PROVIDER_TYPE_AUTO,
	EN_HDMI_PROVIDER_TYPE_PC,
	EN_HDMI_PROVIDER_TYPE_VIDEO,
	EN_HDMI_PROVIDER_TYPE_GAME,
	EN_HDMI_PROVIDER_TYPE_MAX
}EN_FPP_HDMI_PROVIDER_TYPE_T;



//linshunda adding
typedef enum
{
	EN_AV_OUT_MUTE_INVALID = 0x0,
    EN_AV_OUT_MUTE_LINEIN = 0x01, //信源控制
    EN_AV_OUT_MUTE_ENTERNAL = 0x02, //内部，同步显示屏或喇叭的某些条件    
}EN_AV_OUT_MUTE_LEVEL;

/**
@brief HDMI 支持版本类型枚举
*/
typedef enum
{
	EN_HDMI_VERSION_SUPPORT_14 = (1<<0),			//支持EDIE 1.4
	EN_HDMI_VERSION_SUPPORT_20 = (1<<1),			//支持EDID2.0
	EN_HDMI_VERSION_SUPPORT_20AUTO = (1<<2),		//支持2.0 自动识别
}EN_HDMI_VERSION_SUPPORT_TYPE_T;

/**
@brief 执行的状态
**/
typedef enum
{
	EN_ACT_EXEC,///< 只执行
	EN_ACT_SAVE, ///<只保存
	EN_ACT_EXEC_SAVE,///<执行后保存
	EN_ACT_ASYN, ///< 异步执行，会保存
}EN_ACT_CTRL;



/**
@brief digtal audio format
*/
typedef enum tag_audio_digital_format_t
{
    EN_DIGITAL_RORMAT_WAVE = 0x1,
    EN_DIGITAL_FORMAT_MP3 =0x2,
    EN_DIGITAL_FORMAT_AC3 =0x4,
    EN_DIGITAL_FORMAT_DD_Plus=0x8,///<dobly plus
    EN_DIGITAL_FORMAT_AAC=0x10, ///<Advanced Audio Coding
    EN_DIGITAL_FORMAT_HE_AAC=0x20, 
    EN_DIGITAL_FORMAT_DTS=0x40,
    EN_DIGITAL_FORMAT_FLAC=0x80,
    EN_DIGITAL_FORMAT_APE=0x100,
    EN_DIGITAL_FORMAT_WMA=0x200, 
    EN_DIGITAL_FORMAT_ALAC=0x400, ///<Apple lossless
    EN_DIGITAL_FORMAT_AACP=0x800,
    EN_DIGITAL_FORMAT_AAC_V2=0x1000,
    EN_DIGITAL_FORMAT_AAC_V4=0x2000,
    EN_DIGITAL_FORMAT_HEAAC_V2=0x4000,
    EN_DIGITAL_FORMAT_HEAAC_V4=0x8000
}EN_AUDIO_DIGITAL_FORMAT_T;

/**
@brief digital channel mask
*/
typedef enum 
{
    EN_DIGITAL_CHANNEL_MASK_LEFT = 0x1,
    EN_DIGITAL_CHANNEL_MASK_CENTER=0x2,
    EN_DIGITAL_CHANNEL_MASK_RIGHT=0x4,
    EN_DIGITAL_CHANNEL_MASK_LSURROUND=0x8,
    EN_DIGITAL_CHANNEL_MASK_RSURROUND=0x10,
    EN_DIGITAL_CHANNEL_MASK_LBACK=0x20,
    EN_DIGITAL_CHANNEL_MASK_RBACK=0x40,
    EN_DIGITAL_CHANNEL_MASK_LOW_EFFECTS=0x1000,
}EN_AUDIO_DOLBY_CHANNEL_MASK_T;


/**
@brief digital channel
*/
typedef enum tag_audio_digital_channel_t
{
   EN_DIGITAL_CHANNEL_STEREO = 0x00,
   EN_DIGITAL_CHANNEL_LEFT,
   EN_DIGITAL_CHANNEL_RIGHT ,
   EN_DIGITAL_CHANNEL_DUAL_LEFT,
   EN_DIGITAL_CHANNEL_DUAL_RIGHT,
   EN_DIGITAL_CHANNEL_DUAL_BOTH,
   EN_DIGITAL_CHANNEL_MONO,
   EN_DIGITAL_CHANNEL_SAP,
   EN_DIGITAL_CHANNEL_FM_MONO,
   EN_DIGITAL_CHANNEL_STEREO_SAP,
   EN_DIGITAL_CHANNEL_STEREO_MAX,
}EN_DIGITAL__DIGTAL_CHANNEL_T;


/**
@brief digital audio rate
*/
typedef enum tag_audio_digital_rate_t
{
EN_DIGITAL_RATE_16K = 0x1, ///<16k?,?????8k,11k,
EN_DIGITAL_RATE_24K = 0x2,///< ?????22k
EN_DIGITAL_RATE_32K = 0x4,///< DAT???
EN_DIGITAL_RATE_44K = 0x8, ///<CD???
EN_DIGITAL_RATE_48K = 0x10, ///<??47k,????,DVD???
EN_DIGITAL_RATE_96K =0x20, ///<???????
EN_DIGITAL_RATE_192K =0x40,///<???????
EN_DIGITAL_RATE_28224K =0x80,///<SACD
}EN_AUDIO_DIGITAL_RATE_T; ///<???

typedef struct
{
	int32_t aacType;
	int32_t aacProfileAndLevel;
}ST_DIGITAL_INFO_EXTEND;
 
/**
@brief digital info
*/
typedef struct 
{
   EN_AUDIO_DIGITAL_FORMAT_T audio_format; ///<????   
   EN_DIGITAL__DIGTAL_CHANNEL_T channel_type;
   EN_AUDIO_DIGITAL_RATE_T audio_rate;///<unit:K
   EN_AUDIO_DOLBY_CHANNEL_MASK_T dolby_channel_mask; ///<audio_dolby_channel_mask_t
   ST_DIGITAL_INFO_EXTEND *p_extend; ///<????
}ST_AUDIO_DIGITAL_INFO_T;



/**
@brief 信源**/
typedef enum
{
    E_INPUT_ATV = 0,
    E_INPUT_DTV = 1,
    E_INPUT_AV_I =2,
    E_INPUT_AV_II =3,
    E_INPUT_YPBPR =4,
    E_INPUT_PC =5,
    E_INPUT_HDMI_I= 6,
    E_INPUT_HDMI_II = 7,
    E_INPUT_HDMI_III = 8,
    E_INPUT_KTV= 9, //add by lwf 2013.01.17
    E_INPUT_STORAGE = 10, //add by lwf 2013.01.17
    E_INPUT_SCART =11,
    E_INPUT_HDMI_IV =12,
    E_INPUT_NONE =13,
    E_INPUT_NUM
} EN_API_SOURCE_INPUT;

/**
@brief 启动信源**/
typedef enum 
	{ 
	E_BOOT_INPUT_AUTO = 0, 
	E_BOOT_INPUT_ATV = 1, 
	E_BOOT_INPUT_DTV =2, 
	E_BOOT_INPUT_AV1 =3, 
	E_BOOT_INPUT_AV2 =4, 
	E_BOOT_INPUT_YPBPR =5, 
	E_BOOT_INPUT_PC= 6, 
	E_BOOT_INPUT_HDMI1 = 7, 
	E_BOOT_INPUT_HDMI2 = 8, 
	E_BOOT_INPUT_HDMI3 = 9, 
	E_BOOT_INPUT_HDMI4 =10, 
	E_BOOT_INPUT_STORAGE = 11,
	E_BOOT_INPUT_SCART1 =12, 
	E_BOOT_INPUT_NUM 
} EN_TOS_SOURCE_BOOT_INPUT;


typedef struct
{
  uint8_t	hour;
  uint8_t	minute;
  uint8_t	second;
  uint8_t	reserve[1];
} st_api_time;

typedef struct
{
  uint16_t	  year;
  uint8_t	  month;
  uint8_t	  day;
  uint8_t	  hour;
  uint8_t	  minute;
  uint8_t	  second;
  uint8_t	  weekday;
} st_api_date;


typedef enum
{
	EN_FPI_PANEL_SCANNING,
	EN_FPI_PANEL_BLINKING,
	EN_FPI_PANEL_SCANNING_QD,
	EN_FPI_PANEL_BLINKING_QD,
	
	EN_FPI_PANEL_MAX
} EN_FPI_PANEL_TYPE;

typedef struct
{	
	uint16_t width;
	uint16_t height;	
} st_fpi_panel_property;

typedef enum
{
	EN_OSD_BRIGHTNESS,  	///<调整OSD 亮度
	EN_OSD_CONTRAST,		///<调整OSD 对比度
	EN_OSD_SATURATION,		///<调整OSD 饱和度
    EN_OSD_MAX,
} EN_OSD_TYPE;

#ifdef __cplusplus
}
#endif
#include "fpi_adapter.h"

#endif	/*end of __FPI_BASE_TYPES__*/




